//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TLD {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("ConductorsDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ConductorsDataSet : System.Data.DataSet {
        
        private ConductorsDataTable tableConductors;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ConductorsDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ConductorsDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Conductors"] != null)) {
                    base.Tables.Add(new ConductorsDataTable(ds.Tables["Conductors"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ConductorsDataTable Conductors {
            get {
                return this.tableConductors;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            ConductorsDataSet cln = ((ConductorsDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Conductors"] != null)) {
                    base.Tables.Add(new ConductorsDataTable(ds.Tables["Conductors"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableConductors = ((ConductorsDataTable)(base.Tables["Conductors"]));
            if ((initTable == true)) {
                if ((this.tableConductors != null)) {
                    this.tableConductors.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ConductorsDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ConductorsDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableConductors = new ConductorsDataTable();
            base.Tables.Add(this.tableConductors);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeConductors() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            ConductorsDataSet ds = new ConductorsDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void ConductorsRowChangeEventHandler(object sender, ConductorsRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ConductorsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnConductor_Name;
            
            private System.Data.DataColumn _columnOverall_Diameter_mm_;
            
            private System.Data.DataColumn _columnArea_mm2__AL;
            
            private System.Data.DataColumn _columnArea_mm2__Total;
            
            private System.Data.DataColumn _columnUnit_Weight_kg_m_;
            
            private System.Data.DataColumn _columnUTS_kg_;
            
            private System.Data.DataColumn _columnE_Initial__kg_mm2_;
            
            private System.Data.DataColumn _columnE_Final__kg_mm2_;
            
            private System.Data.DataColumn _columnα_1___C_;
            
            private System.Data.DataColumn _columnEquivalent_Creep_Temperature__C_;
            
            private System.Data.DataColumn _columnDC_Resistance_at_20_C_Ω_km_;
            
            private System.Data.DataColumn _columnGMR_cm_;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConductorsDataTable() {
                this.TableName = "Conductors";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConductorsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ConductorsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Conductor_NameColumn {
                get {
                    return this.columnConductor_Name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _Overall_Diameter_mm_Column {
                get {
                    return this._columnOverall_Diameter_mm_;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _Area_mm2__ALColumn {
                get {
                    return this._columnArea_mm2__AL;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _Area_mm2__TotalColumn {
                get {
                    return this._columnArea_mm2__Total;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _Unit_Weight_kg_m_Column {
                get {
                    return this._columnUnit_Weight_kg_m_;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _UTS_kg_Column {
                get {
                    return this._columnUTS_kg_;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _E_Initial__kg_mm2_Column {
                get {
                    return this._columnE_Initial__kg_mm2_;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _E_Final__kg_mm2_Column {
                get {
                    return this._columnE_Final__kg_mm2_;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _α_1___C_Column {
                get {
                    return this._columnα_1___C_;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _Equivalent_Creep_Temperature__C_Column {
                get {
                    return this._columnEquivalent_Creep_Temperature__C_;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _DC_Resistance_at_20_C_Ω_km_Column {
                get {
                    return this._columnDC_Resistance_at_20_C_Ω_km_;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _GMR_cm_Column {
                get {
                    return this._columnGMR_cm_;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConductorsRow this[int index] {
                get {
                    return ((ConductorsRow)(this.Rows[index]));
                }
            }
            
            public event ConductorsRowChangeEventHandler ConductorsRowChanging;
            
            public event ConductorsRowChangeEventHandler ConductorsRowChanged;
            
            public event ConductorsRowChangeEventHandler ConductorsRowDeleting;
            
            public event ConductorsRowChangeEventHandler ConductorsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddConductorsRow(ConductorsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConductorsRow AddConductorsRow(string Conductor_Name, double _Overall_Diameter_mm_, double _Area_mm2__AL, double _Area_mm2__Total, double _Unit_Weight_kg_m_, double _UTS_kg_, double _E_Initial__kg_mm2_, double _E_Final__kg_mm2_, double _α_1___C_, double _Equivalent_Creep_Temperature__C_, double _DC_Resistance_at_20_C_Ω_km_, double _GMR_cm_) {
                ConductorsRow rowConductorsRow = ((ConductorsRow)(this.NewRow()));
                rowConductorsRow.ItemArray = new object[] {
                        Conductor_Name,
                        _Overall_Diameter_mm_,
                        _Area_mm2__AL,
                        _Area_mm2__Total,
                        _Unit_Weight_kg_m_,
                        _UTS_kg_,
                        _E_Initial__kg_mm2_,
                        _E_Final__kg_mm2_,
                        _α_1___C_,
                        _Equivalent_Creep_Temperature__C_,
                        _DC_Resistance_at_20_C_Ω_km_,
                        _GMR_cm_};
                this.Rows.Add(rowConductorsRow);
                return rowConductorsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ConductorsDataTable cln = ((ConductorsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ConductorsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnConductor_Name = base.Columns["Conductor Name"];
                this._columnOverall_Diameter_mm_ = base.Columns["Overall Diameter(mm)"];
                this._columnArea_mm2__AL = base.Columns["Area(mm2) AL"];
                this._columnArea_mm2__Total = base.Columns["Area(mm2) Total"];
                this._columnUnit_Weight_kg_m_ = base.Columns["Unit Weight(kg/m)"];
                this._columnUTS_kg_ = base.Columns["UTS(kg)"];
                this._columnE_Initial__kg_mm2_ = base.Columns["E(Initial)(kg/mm2)"];
                this._columnE_Final__kg_mm2_ = base.Columns["E(Final)(kg/mm2)"];
                this._columnα_1___C_ = base.Columns["α(1/ °C)"];
                this._columnEquivalent_Creep_Temperature__C_ = base.Columns["Equivalent Creep Temperature(°C)"];
                this._columnDC_Resistance_at_20_C_Ω_km_ = base.Columns["DC Resistance at 20°C(Ω/km)"];
                this._columnGMR_cm_ = base.Columns["GMR(cm)"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnConductor_Name = new System.Data.DataColumn("Conductor Name", typeof(string), null, System.Data.MappingType.Element);
                this.columnConductor_Name.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Conductor_Name");
                this.columnConductor_Name.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Conductor_NameColumn");
                this.columnConductor_Name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnConductor_Name");
                this.columnConductor_Name.ExtendedProperties.Add("Generator_UserColumnName", "Conductor Name");
                base.Columns.Add(this.columnConductor_Name);
                this._columnOverall_Diameter_mm_ = new System.Data.DataColumn("Overall Diameter(mm)", typeof(double), null, System.Data.MappingType.Element);
                this._columnOverall_Diameter_mm_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_Overall_Diameter_mm_");
                this._columnOverall_Diameter_mm_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_Overall_Diameter_mm_Column");
                this._columnOverall_Diameter_mm_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnOverall_Diameter_mm_");
                this._columnOverall_Diameter_mm_.ExtendedProperties.Add("Generator_UserColumnName", "Overall Diameter(mm)");
                base.Columns.Add(this._columnOverall_Diameter_mm_);
                this._columnArea_mm2__AL = new System.Data.DataColumn("Area(mm2) AL", typeof(double), null, System.Data.MappingType.Element);
                this._columnArea_mm2__AL.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_Area_mm2__AL");
                this._columnArea_mm2__AL.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_Area_mm2__ALColumn");
                this._columnArea_mm2__AL.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnArea_mm2__AL");
                this._columnArea_mm2__AL.ExtendedProperties.Add("Generator_UserColumnName", "Area(mm2) AL");
                base.Columns.Add(this._columnArea_mm2__AL);
                this._columnArea_mm2__Total = new System.Data.DataColumn("Area(mm2) Total", typeof(double), null, System.Data.MappingType.Element);
                this._columnArea_mm2__Total.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_Area_mm2__Total");
                this._columnArea_mm2__Total.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_Area_mm2__TotalColumn");
                this._columnArea_mm2__Total.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnArea_mm2__Total");
                this._columnArea_mm2__Total.ExtendedProperties.Add("Generator_UserColumnName", "Area(mm2) Total");
                base.Columns.Add(this._columnArea_mm2__Total);
                this._columnUnit_Weight_kg_m_ = new System.Data.DataColumn("Unit Weight(kg/m)", typeof(double), null, System.Data.MappingType.Element);
                this._columnUnit_Weight_kg_m_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_Unit_Weight_kg_m_");
                this._columnUnit_Weight_kg_m_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_Unit_Weight_kg_m_Column");
                this._columnUnit_Weight_kg_m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnUnit_Weight_kg_m_");
                this._columnUnit_Weight_kg_m_.ExtendedProperties.Add("Generator_UserColumnName", "Unit Weight(kg/m)");
                base.Columns.Add(this._columnUnit_Weight_kg_m_);
                this._columnUTS_kg_ = new System.Data.DataColumn("UTS(kg)", typeof(double), null, System.Data.MappingType.Element);
                this._columnUTS_kg_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_UTS_kg_");
                this._columnUTS_kg_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_UTS_kg_Column");
                this._columnUTS_kg_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnUTS_kg_");
                this._columnUTS_kg_.ExtendedProperties.Add("Generator_UserColumnName", "UTS(kg)");
                base.Columns.Add(this._columnUTS_kg_);
                this._columnE_Initial__kg_mm2_ = new System.Data.DataColumn("E(Initial)(kg/mm2)", typeof(double), null, System.Data.MappingType.Element);
                this._columnE_Initial__kg_mm2_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_E_Initial__kg_mm2_");
                this._columnE_Initial__kg_mm2_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_E_Initial__kg_mm2_Column");
                this._columnE_Initial__kg_mm2_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnE_Initial__kg_mm2_");
                this._columnE_Initial__kg_mm2_.ExtendedProperties.Add("Generator_UserColumnName", "E(Initial)(kg/mm2)");
                base.Columns.Add(this._columnE_Initial__kg_mm2_);
                this._columnE_Final__kg_mm2_ = new System.Data.DataColumn("E(Final)(kg/mm2)", typeof(double), null, System.Data.MappingType.Element);
                this._columnE_Final__kg_mm2_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_E_Final__kg_mm2_");
                this._columnE_Final__kg_mm2_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_E_Final__kg_mm2_Column");
                this._columnE_Final__kg_mm2_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnE_Final__kg_mm2_");
                this._columnE_Final__kg_mm2_.ExtendedProperties.Add("Generator_UserColumnName", "E(Final)(kg/mm2)");
                base.Columns.Add(this._columnE_Final__kg_mm2_);
                this._columnα_1___C_ = new System.Data.DataColumn("α(1/ °C)", typeof(double), null, System.Data.MappingType.Element);
                this._columnα_1___C_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_α_1___C_");
                this._columnα_1___C_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_α_1___C_Column");
                this._columnα_1___C_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnα_1___C_");
                this._columnα_1___C_.ExtendedProperties.Add("Generator_UserColumnName", "α(1/ °C)");
                base.Columns.Add(this._columnα_1___C_);
                this._columnEquivalent_Creep_Temperature__C_ = new System.Data.DataColumn("Equivalent Creep Temperature(°C)", typeof(double), null, System.Data.MappingType.Element);
                this._columnEquivalent_Creep_Temperature__C_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_Equivalent_Creep_Temperature__C_");
                this._columnEquivalent_Creep_Temperature__C_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_Equivalent_Creep_Temperature__C_Column");
                this._columnEquivalent_Creep_Temperature__C_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnEquivalent_Creep_Temperature__C_");
                this._columnEquivalent_Creep_Temperature__C_.ExtendedProperties.Add("Generator_UserColumnName", "Equivalent Creep Temperature(°C)");
                base.Columns.Add(this._columnEquivalent_Creep_Temperature__C_);
                this._columnDC_Resistance_at_20_C_Ω_km_ = new System.Data.DataColumn("DC Resistance at 20°C(Ω/km)", typeof(double), null, System.Data.MappingType.Element);
                this._columnDC_Resistance_at_20_C_Ω_km_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_DC_Resistance_at_20_C_Ω_km_");
                this._columnDC_Resistance_at_20_C_Ω_km_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_DC_Resistance_at_20_C_Ω_km_Column");
                this._columnDC_Resistance_at_20_C_Ω_km_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnDC_Resistance_at_20_C_Ω_km_");
                this._columnDC_Resistance_at_20_C_Ω_km_.ExtendedProperties.Add("Generator_UserColumnName", "DC Resistance at 20°C(Ω/km)");
                base.Columns.Add(this._columnDC_Resistance_at_20_C_Ω_km_);
                this._columnGMR_cm_ = new System.Data.DataColumn("GMR(cm)", typeof(double), null, System.Data.MappingType.Element);
                this._columnGMR_cm_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_GMR_cm_");
                this._columnGMR_cm_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_GMR_cm_Column");
                this._columnGMR_cm_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnGMR_cm_");
                this._columnGMR_cm_.ExtendedProperties.Add("Generator_UserColumnName", "GMR(cm)");
                base.Columns.Add(this._columnGMR_cm_);
                this.columnConductor_Name.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConductorsRow NewConductorsRow() {
                return ((ConductorsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ConductorsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ConductorsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ConductorsRowChanged != null)) {
                    this.ConductorsRowChanged(this, new ConductorsRowChangeEvent(((ConductorsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ConductorsRowChanging != null)) {
                    this.ConductorsRowChanging(this, new ConductorsRowChangeEvent(((ConductorsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ConductorsRowDeleted != null)) {
                    this.ConductorsRowDeleted(this, new ConductorsRowChangeEvent(((ConductorsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ConductorsRowDeleting != null)) {
                    this.ConductorsRowDeleting(this, new ConductorsRowChangeEvent(((ConductorsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveConductorsRow(ConductorsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ConductorsDataSet ds = new ConductorsDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ConductorsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ConductorsRow : System.Data.DataRow {
            
            private ConductorsDataTable tableConductors;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConductorsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableConductors = ((ConductorsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Conductor_Name {
                get {
                    try {
                        return ((string)(this[this.tableConductors.Conductor_NameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Conductor Name\' in table \'Conductors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConductors.Conductor_NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double _Overall_Diameter_mm_ {
                get {
                    try {
                        return ((double)(this[this.tableConductors._Overall_Diameter_mm_Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Overall Diameter(mm)\' in table \'Conductors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConductors._Overall_Diameter_mm_Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double _Area_mm2__AL {
                get {
                    try {
                        return ((double)(this[this.tableConductors._Area_mm2__ALColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Area(mm2) AL\' in table \'Conductors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConductors._Area_mm2__ALColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double _Area_mm2__Total {
                get {
                    try {
                        return ((double)(this[this.tableConductors._Area_mm2__TotalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Area(mm2) Total\' in table \'Conductors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConductors._Area_mm2__TotalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double _Unit_Weight_kg_m_ {
                get {
                    try {
                        return ((double)(this[this.tableConductors._Unit_Weight_kg_m_Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Unit Weight(kg/m)\' in table \'Conductors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConductors._Unit_Weight_kg_m_Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double _UTS_kg_ {
                get {
                    try {
                        return ((double)(this[this.tableConductors._UTS_kg_Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UTS(kg)\' in table \'Conductors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConductors._UTS_kg_Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double _E_Initial__kg_mm2_ {
                get {
                    try {
                        return ((double)(this[this.tableConductors._E_Initial__kg_mm2_Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'E(Initial)(kg/mm2)\' in table \'Conductors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConductors._E_Initial__kg_mm2_Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double _E_Final__kg_mm2_ {
                get {
                    try {
                        return ((double)(this[this.tableConductors._E_Final__kg_mm2_Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'E(Final)(kg/mm2)\' in table \'Conductors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConductors._E_Final__kg_mm2_Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double _α_1___C_ {
                get {
                    try {
                        return ((double)(this[this.tableConductors._α_1___C_Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'α(1/ °C)\' in table \'Conductors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConductors._α_1___C_Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double _Equivalent_Creep_Temperature__C_ {
                get {
                    try {
                        return ((double)(this[this.tableConductors._Equivalent_Creep_Temperature__C_Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Equivalent Creep Temperature(°C)\' in table \'Conductors\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableConductors._Equivalent_Creep_Temperature__C_Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double _DC_Resistance_at_20_C_Ω_km_ {
                get {
                    try {
                        return ((double)(this[this.tableConductors._DC_Resistance_at_20_C_Ω_km_Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DC Resistance at 20°C(Ω/km)\' in table \'Conductors\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableConductors._DC_Resistance_at_20_C_Ω_km_Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double _GMR_cm_ {
                get {
                    try {
                        return ((double)(this[this.tableConductors._GMR_cm_Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'GMR(cm)\' in table \'Conductors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConductors._GMR_cm_Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConductor_NameNull() {
                return this.IsNull(this.tableConductors.Conductor_NameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConductor_NameNull() {
                this[this.tableConductors.Conductor_NameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Overall_Diameter_mm_Null() {
                return this.IsNull(this.tableConductors._Overall_Diameter_mm_Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_Overall_Diameter_mm_Null() {
                this[this.tableConductors._Overall_Diameter_mm_Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Area_mm2__ALNull() {
                return this.IsNull(this.tableConductors._Area_mm2__ALColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_Area_mm2__ALNull() {
                this[this.tableConductors._Area_mm2__ALColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Area_mm2__TotalNull() {
                return this.IsNull(this.tableConductors._Area_mm2__TotalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_Area_mm2__TotalNull() {
                this[this.tableConductors._Area_mm2__TotalColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Unit_Weight_kg_m_Null() {
                return this.IsNull(this.tableConductors._Unit_Weight_kg_m_Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_Unit_Weight_kg_m_Null() {
                this[this.tableConductors._Unit_Weight_kg_m_Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_UTS_kg_Null() {
                return this.IsNull(this.tableConductors._UTS_kg_Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_UTS_kg_Null() {
                this[this.tableConductors._UTS_kg_Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_E_Initial__kg_mm2_Null() {
                return this.IsNull(this.tableConductors._E_Initial__kg_mm2_Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_E_Initial__kg_mm2_Null() {
                this[this.tableConductors._E_Initial__kg_mm2_Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_E_Final__kg_mm2_Null() {
                return this.IsNull(this.tableConductors._E_Final__kg_mm2_Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_E_Final__kg_mm2_Null() {
                this[this.tableConductors._E_Final__kg_mm2_Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_α_1___C_Null() {
                return this.IsNull(this.tableConductors._α_1___C_Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_α_1___C_Null() {
                this[this.tableConductors._α_1___C_Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Equivalent_Creep_Temperature__C_Null() {
                return this.IsNull(this.tableConductors._Equivalent_Creep_Temperature__C_Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_Equivalent_Creep_Temperature__C_Null() {
                this[this.tableConductors._Equivalent_Creep_Temperature__C_Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_DC_Resistance_at_20_C_Ω_km_Null() {
                return this.IsNull(this.tableConductors._DC_Resistance_at_20_C_Ω_km_Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_DC_Resistance_at_20_C_Ω_km_Null() {
                this[this.tableConductors._DC_Resistance_at_20_C_Ω_km_Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_GMR_cm_Null() {
                return this.IsNull(this.tableConductors._GMR_cm_Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_GMR_cm_Null() {
                this[this.tableConductors._GMR_cm_Column] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ConductorsRowChangeEvent : System.EventArgs {
            
            private ConductorsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConductorsRowChangeEvent(ConductorsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConductorsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace TLD.ConductorsDataSetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ConductorsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private System.Data.OleDb.OleDbConnection _connection;
        
        private System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ConductorsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OleDb.OleDbDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Conductors";
            tableMapping.ColumnMappings.Add("Conductor Name", "Conductor Name");
            tableMapping.ColumnMappings.Add("Overall Diameter(mm)", "Overall Diameter(mm)");
            tableMapping.ColumnMappings.Add("Area(mm2) AL", "Area(mm2) AL");
            tableMapping.ColumnMappings.Add("Area(mm2) Total", "Area(mm2) Total");
            tableMapping.ColumnMappings.Add("Unit Weight(kg/m)", "Unit Weight(kg/m)");
            tableMapping.ColumnMappings.Add("UTS(kg)", "UTS(kg)");
            tableMapping.ColumnMappings.Add("E(Initial)(kg/mm2)", "E(Initial)(kg/mm2)");
            tableMapping.ColumnMappings.Add("E(Final)(kg/mm2)", "E(Final)(kg/mm2)");
            tableMapping.ColumnMappings.Add("α(1/ °C)", "α(1/ °C)");
            tableMapping.ColumnMappings.Add("Equivalent Creep Temperature(°C)", "Equivalent Creep Temperature(°C)");
            tableMapping.ColumnMappings.Add("DC Resistance at 20°C(Ω/km)", "DC Resistance at 20°C(Ω/km)");
            tableMapping.ColumnMappings.Add("GMR(cm)", "GMR(cm)");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO `Conductors` (`Conductor Name`, `Overall Diameter(mm)`, `Area(mm2) AL`, `Area(mm2) Total`, `Unit Weight(kg/m)`, `UTS(kg)`, `E(Initial)(kg/mm2)`, `E(Final)(kg/mm2)`, `α(1/ °C)`, `Equivalent Creep Temperature(°C)`, `DC Resistance at 20°C(Ω/km)`, `GMR(cm)`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Conductor_Name", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Conductor Name", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Overall_Diameter(mm)", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Overall Diameter(mm)", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Area(mm2)_AL", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Area(mm2) AL", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Area(mm2)_Total", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Area(mm2) Total", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Unit_Weight(kg/m)", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Unit Weight(kg/m)", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("UTS(kg)", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UTS(kg)", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("E(Initial)(kg/mm2)", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "E(Initial)(kg/mm2)", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("E(Final)(kg/mm2)", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "E(Final)(kg/mm2)", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("α(1/_°C)", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "α(1/ °C)", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Equivalent_Creep_Temperature(°C)", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Equivalent Creep Temperature(°C)", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("DC_Resistance_at_20°C(Ω/km)", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DC Resistance at 20°C(Ω/km)", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("GMR(cm)", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GMR(cm)", System.Data.DataRowVersion.Current, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::TLD.Properties.Settings.Default.ConductorsConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT [Conductor Name], [Overall Diameter(mm)], [Area(mm2) AL], [Area(mm2) Total], [Unit Weight(kg/m)], [UTS(kg)], [E(Initial)(kg/mm2)], [E(Final)(kg/mm2)], [α(1/ °C)], [Equivalent Creep Temperature(°C)], [DC Resistance at 20°C(Ω/km)], [GMR(cm)] FROM Conductors";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ConductorsDataSet.ConductorsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ConductorsDataSet.ConductorsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ConductorsDataSet.ConductorsDataTable dataTable = new ConductorsDataSet.ConductorsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ConductorsDataSet.ConductorsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ConductorsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Conductors");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Conductor_Name, System.Nullable<double> _Overall_Diameter_mm_, System.Nullable<double> _Area_mm2__AL, System.Nullable<double> _Area_mm2__Total, System.Nullable<double> _Unit_Weight_kg_m_, System.Nullable<double> _UTS_kg_, System.Nullable<double> _E_Initial__kg_mm2_, System.Nullable<double> _E_Final__kg_mm2_, System.Nullable<double> _α_1___C_, System.Nullable<double> _Equivalent_Creep_Temperature__C_, System.Nullable<double> _DC_Resistance_at_20_C_Ω_km_, System.Nullable<double> _GMR_cm_) {
            if ((Conductor_Name == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Conductor_Name));
            }
            if ((_Overall_Diameter_mm_.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((double)(_Overall_Diameter_mm_.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((_Area_mm2__AL.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((double)(_Area_mm2__AL.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((_Area_mm2__Total.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(_Area_mm2__Total.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((_Unit_Weight_kg_m_.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(_Unit_Weight_kg_m_.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((_UTS_kg_.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(_UTS_kg_.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((_E_Initial__kg_mm2_.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(_E_Initial__kg_mm2_.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((_E_Final__kg_mm2_.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(_E_Final__kg_mm2_.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((_α_1___C_.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(_α_1___C_.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((_Equivalent_Creep_Temperature__C_.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((double)(_Equivalent_Creep_Temperature__C_.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((_DC_Resistance_at_20_C_Ω_km_.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((double)(_DC_Resistance_at_20_C_Ω_km_.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((_GMR_cm_.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((double)(_GMR_cm_.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591